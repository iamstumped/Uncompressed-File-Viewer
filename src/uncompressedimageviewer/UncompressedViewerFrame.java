/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uncompressedimageviewer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JSpinner;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author iamstumped
 */
public class UncompressedViewerFrame extends javax.swing.JFrame {
    
    private File imageTarget;
    private byte[] fileIn;
    BufferedImage imgOut;

    /**
     * Creates new form ControlFrame
     */
    public UncompressedViewerFrame() {
        initComponents();
    }
    
    private void updateOffset() {
        StringBuilder sb = new StringBuilder();
        for (byte b : Arrays.copyOfRange(fileIn, 0, (int) offsetSpinner.getValue())) {
            sb.append(String.format("%02X ", b));
        }
        skippedDataField.setText(sb.toString());
    }
    
    private void enableImageMenu(boolean enabled) {
        saveItem.setEnabled(enabled);
        clearItem.setEnabled(enabled);
        popSaveItem.setEnabled(enabled);
        popClearItem.setEnabled(enabled);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileInChooser = new javax.swing.JFileChooser();
        pixelFormatGroup = new javax.swing.ButtonGroup();
        imgSaveChooser = new javax.swing.JFileChooser();
        jColorChooser1 = new javax.swing.JColorChooser();
        imgPopMenu = new javax.swing.JPopupMenu();
        popSaveItem = new javax.swing.JMenuItem();
        popClearItem = new javax.swing.JMenuItem();
        filePanel = new javax.swing.JPanel();
        filePathField = new javax.swing.JTextField();
        fileBrowseButton = new javax.swing.JButton();
        fileErrorLabel = new javax.swing.JLabel();
        fileErrorLabel1 = new javax.swing.JLabel();
        offsetPanel = new javax.swing.JPanel();
        offsetSlider = new javax.swing.JSlider();
        offsetSpinner = new javax.swing.JSpinner();
        skippedDataField = new javax.swing.JTextField();
        skippedLabel = new javax.swing.JLabel();
        imagePanel = new javax.swing.JPanel();
        bgrButton = new javax.swing.JRadioButton();
        bgraButton = new javax.swing.JRadioButton();
        pixelFormatLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        widthSpinner = new javax.swing.JSpinner();
        widthSlider = new javax.swing.JSlider();
        widthLabel = new javax.swing.JLabel();
        heightSlider = new javax.swing.JSlider();
        heightSpinner = new javax.swing.JSpinner();
        heightLabel = new javax.swing.JLabel();
        widthComboBox = new javax.swing.JComboBox<>();
        heightComboBox = new javax.swing.JComboBox<>();
        rgbButton = new javax.swing.JRadioButton();
        rgbaButton = new javax.swing.JRadioButton();
        viewButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputPanel = new javax.swing.JPanel();
        previewLabel = new javax.swing.JLabel();
        pixelCountLabel = new javax.swing.JLabel();
        bkgPreviewPanel = new javax.swing.JPanel();
        bkgChooseLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveItem = new javax.swing.JMenuItem();
        clearItem = new javax.swing.JMenuItem();

        imgSaveChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        imgSaveChooser.setFileFilter(new FileNameExtensionFilter("PNG", "png"));

        jColorChooser1.setColor(new java.awt.Color(60, 63, 65));

        popSaveItem.setText("Save Image");
        popSaveItem.setEnabled(false);
        popSaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popSaveItemActionPerformed(evt);
            }
        });
        imgPopMenu.add(popSaveItem);

        popClearItem.setText("Clear Image");
        popClearItem.setEnabled(false);
        clearItem.setEnabled(false);
        popClearItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popClearItemActionPerformed(evt);
            }
        });
        imgPopMenu.add(popClearItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Uncommpressed File Viewer");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("assets/UncompressedViewerIcon.png")));
        setMinimumSize(new java.awt.Dimension(296, 589));

        filePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select File"));

        filePathField.setMaximumSize(new java.awt.Dimension(64, 22));
        filePathField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                filePathFieldCaretUpdate(evt);
            }
        });

        fileBrowseButton.setText("Browse");
        fileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowseButtonActionPerformed(evt);
            }
        });

        fileErrorLabel.setForeground(java.awt.Color.red);
        fileErrorLabel.setText("* File not found");
        fileErrorLabel.setVisible(false);

        fileErrorLabel1.setForeground(java.awt.Color.red);
        fileErrorLabel1.setText(" ");
        fileErrorLabel.setVisible(false);

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addComponent(filePathField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(filePanelLayout.createSequentialGroup()
                .addComponent(fileErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fileErrorLabel1))
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileErrorLabel)
                    .addComponent(fileErrorLabel1)))
        );

        offsetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Offset"));

        offsetSlider.setMajorTickSpacing(offsetSlider.getMaximum());
        offsetSlider.setPaintLabels(true);
        offsetSlider.setPaintTicks(true);
        offsetSlider.setValue(0);
        offsetSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSliderStateChanged(evt);
            }
        });

        offsetSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        offsetSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSpinnerStateChanged(evt);
            }
        });

        skippedDataField.setEditable(false);

        skippedLabel.setText("Skipped data:");

        javax.swing.GroupLayout offsetPanelLayout = new javax.swing.GroupLayout(offsetPanel);
        offsetPanel.setLayout(offsetPanelLayout);
        offsetPanelLayout.setHorizontalGroup(
            offsetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(skippedDataField, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(offsetSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, offsetPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(offsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(offsetPanelLayout.createSequentialGroup()
                .addComponent(skippedLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        offsetPanelLayout.setVerticalGroup(
            offsetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(offsetPanelLayout.createSequentialGroup()
                .addComponent(offsetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(offsetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(skippedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skippedDataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));

        pixelFormatGroup.add(bgrButton);
        bgrButton.setText("BGR");

        pixelFormatGroup.add(bgraButton);
        bgraButton.setSelected(true);
        bgraButton.setText("BGRA");

        pixelFormatLabel.setText("Pixel format:");

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(1024, 0, null, 1));
        widthSpinner.setEditor(new JSpinner.NumberEditor(widthSpinner, "#"));
        widthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSpinnerStateChanged(evt);
            }
        });

        widthSlider.setMajorTickSpacing(2048);
        widthSlider.setMaximum(8192);
        widthSlider.setMinorTickSpacing(512);
        widthSlider.setPaintLabels(true);
        widthSlider.setPaintTicks(true);
        widthSlider.setValue(1024);
        widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSliderStateChanged(evt);
            }
        });

        widthLabel.setText("Width:");

        heightSlider.setMajorTickSpacing(2048);
        heightSlider.setMaximum(8192);
        heightSlider.setMinorTickSpacing(512);
        heightSlider.setPaintLabels(true);
        heightSlider.setPaintTicks(true);
        heightSlider.setValue(1024);
        heightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heightSliderStateChanged(evt);
            }
        });

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(1024, 0, null, 1));
        widthSpinner.setEditor(new JSpinner.NumberEditor(widthSpinner, "#"));
        heightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heightSpinnerStateChanged(evt);
            }
        });

        heightLabel.setText("Height:");

        widthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192" }));
        widthComboBox.setSelectedItem(null);
        widthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthComboBoxActionPerformed(evt);
            }
        });

        heightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192" }));
        heightComboBox.setSelectedItem(null);
        heightComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightComboBoxActionPerformed(evt);
            }
        });

        pixelFormatGroup.add(rgbButton);
        rgbButton.setText("RGB");

        pixelFormatGroup.add(rgbaButton);
        rgbaButton.setText("RGBA");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(widthSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
            .addComponent(heightSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(imagePanelLayout.createSequentialGroup()
                        .addComponent(heightLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(heightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanelLayout.createSequentialGroup()
                        .addComponent(widthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(widthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(imagePanelLayout.createSequentialGroup()
                        .addComponent(pixelFormatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rgbButton)
                            .addComponent(rgbaButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bgrButton)
                            .addComponent(bgraButton))
                        .addGap(59, 59, 59))))
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(imagePanelLayout.createSequentialGroup()
                        .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bgrButton)
                            .addComponent(pixelFormatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bgraButton))
                    .addGroup(imagePanelLayout.createSequentialGroup()
                        .addComponent(rgbButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rgbaButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(widthLabel)
                    .addComponent(widthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(widthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightLabel)
                    .addComponent(heightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(2000, 12));
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(32);
        jScrollPane2.getHorizontalScrollBar().setUnitIncrement(32);

        outputPanel.setBackground(new java.awt.Color(255, 255, 255));
        outputPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        outputPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        outputPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addComponent(previewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 834, Short.MAX_VALUE))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addComponent(previewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(518, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(outputPanel);

        bkgPreviewPanel.setBackground(new java.awt.Color(255, 255, 255));
        bkgPreviewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bkgPreviewPanel.setMaximumSize(new java.awt.Dimension(16, 16));
        bkgPreviewPanel.setMinimumSize(new java.awt.Dimension(16, 16));
        bkgPreviewPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bkgPreviewPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bkgPreviewPanelLayout = new javax.swing.GroupLayout(bkgPreviewPanel);
        bkgPreviewPanel.setLayout(bkgPreviewPanelLayout);
        bkgPreviewPanelLayout.setHorizontalGroup(
            bkgPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        bkgPreviewPanelLayout.setVerticalGroup(
            bkgPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        bkgChooseLabel.setText("Choose background colour:");
        bkgChooseLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bkgChooseLabelMouseClicked(evt);
            }
        });

        fileMenu.setText("File");

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveItem.setText("Save Image");
        saveItem.setEnabled(false);
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        clearItem.setText("Clear Image");
        clearItem.setEnabled(false);
        clearItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearItemActionPerformed(evt);
            }
        });
        fileMenu.add(clearItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(offsetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(viewButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pixelCountLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bkgChooseLabel)
                        .addGap(18, 18, 18)
                        .addComponent(bkgPreviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(filePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(offsetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bkgPreviewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bkgChooseLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pixelCountLabel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void offsetSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSliderStateChanged
        // TODO add your handling code here:
        offsetSpinner.setValue(offsetSlider.getValue());
    }//GEN-LAST:event_offsetSliderStateChanged

    private void offsetSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSpinnerStateChanged
        // TODO add your handling code here:
        offsetSlider.setValue((int) offsetSpinner.getValue());
        try {
            //if (!fileLoaded && Files.exists(Paths.get(imageTarget.getPath()))) {
                fileIn = Files.readAllBytes(Paths.get(imageTarget.getPath()));
            //}
            updateOffset();
        } 
        catch (IOException | java.lang.NullPointerException imgException) {
            pixelCountLabel.setText("Image or filepath error");
            pixelCountLabel.setForeground(Color.red);
            pixelCountLabel.setToolTipText("Try selecting an image.");
        }
    }//GEN-LAST:event_offsetSpinnerStateChanged

    private void fileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowseButtonActionPerformed
        // TODO add your handling code here:
        int result = fileInChooser.showDialog(this, "Open");
        if (result == fileInChooser.APPROVE_OPTION) {
            filePathField.setText(fileInChooser.getSelectedFile().toString());
            imageTarget = new File(fileInChooser.getSelectedFile().toString());
        }
    }//GEN-LAST:event_fileBrowseButtonActionPerformed

    private void widthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSpinnerStateChanged
        // TODO add your handling code here:
        widthSlider.setValue((int) widthSpinner.getValue());
        widthComboBox.setSelectedItem(null);
    }//GEN-LAST:event_widthSpinnerStateChanged

    private void widthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSliderStateChanged
        // TODO add your handling code here:
        widthSpinner.setValue(widthSlider.getValue());
    }//GEN-LAST:event_widthSliderStateChanged

    private void heightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heightSliderStateChanged
        // TODO add your handling code here:
        heightSpinner.setValue(heightSlider.getValue());
    }//GEN-LAST:event_heightSliderStateChanged

    private void heightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heightSpinnerStateChanged
        // TODO add your handling code here:
        heightSlider.setValue((int) heightSpinner.getValue());
        heightComboBox.setSelectedItem(null);
    }//GEN-LAST:event_heightSpinnerStateChanged

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        try {
            //if (!fileLoaded && Files.exists(Paths.get(imageTarget.getPath()))) {
                fileIn = Files.readAllBytes(Paths.get(imageTarget.getPath()));
            //}
            updateOffset();
        } 
        catch (IOException | java.lang.NullPointerException imgException) {
            pixelCountLabel.setText("Image or filepath error");
            pixelCountLabel.setToolTipText("Try selecting an image.");
            pixelCountLabel.setForeground(Color.red);
            return;
        }
        
        /*jLabel1.setIcon(new ImageIcon(imageTarget.toString()));
        this.setSize(1000, 1000);*/
        imgOut = new BufferedImage((int) widthSpinner.getValue(), (int) heightSpinner.getValue(), BufferedImage.TYPE_INT_ARGB);
        
        //WHY THE FUCK ARE BYTES SIGNED IN JAVA?????
        int[] fuckThis = new int[fileIn.length];
        for (int i = 0; i < fuckThis.length; i++) {
            if (fileIn[i] < 0) {
                fuckThis[i] = 256 + fileIn[i];
            }
            else {
                fuckThis[i] = fileIn[i];
            }
        }
        
        int subpixel;
        //width of subpixels
        if (bgraButton.isSelected() || rgbaButton.isSelected()) {
            subpixel = 4;
        } 
        else {
            subpixel = 3;
        }
        
        int pixel = (int) offsetSpinner.getValue();
        for (int y = 0; y < imgOut.getHeight() && pixel + 3 < fuckThis.length; y++) {
            for (int x = 0; x < imgOut.getWidth() && pixel + 3 < fuckThis.length; x++) {
                if (bgraButton.isSelected()) {imgOut.setRGB(x, y, (new Color(fuckThis[pixel + 2], fuckThis[pixel + 1], fuckThis[pixel + 0], fuckThis[pixel + 3])).getRGB());}
                else if (bgrButton.isSelected()) {imgOut.setRGB(x, y, (new Color(fuckThis[pixel + 2], fuckThis[pixel + 1], fuckThis[pixel + 0])).getRGB());}
                else if (rgbaButton.isSelected()) {imgOut.setRGB(x, y, (new Color(fuckThis[pixel + 0], fuckThis[pixel + 1], fuckThis[pixel + 2], fuckThis[pixel + 3])).getRGB());}
                else if (bgrButton.isSelected()) {imgOut.setRGB(x, y, (new Color(fuckThis[pixel + 0], fuckThis[pixel + 1], fuckThis[pixel + 2])).getRGB());}
                
                pixel += subpixel;
            }
        }
        //display issues with pixel count
        int pixelMiss = (imgOut.getHeight() * imgOut.getWidth() * subpixel) - fuckThis.length + (int) offsetSpinner.getValue();
        pixelCountLabel.setForeground(Color.black);
        if (pixelMiss == 0) {
            pixelCountLabel.setText("<html><b>0</b>: Pixel and resolution match!</html>");
            pixelCountLabel.setToolTipText("<html>If something looks wrong, try adjusting the width/height ratio.<br>For example, if your image is doubled, multiply width by 0.5 and height by 2.<br>If your colours are wrong, try adjusting the offset or pixel format.</html>");
        } 
        else if (Math.abs(pixelMiss) < 50) {
            pixelCountLabel.setText("<html><b>" + pixelMiss + "</b>: Slight mismatch. Try adjusting the offset.");
            pixelCountLabel.setToolTipText("<html>If your image looks fine, or if it's heavily tinted, it's likely the offset.<br>If it does not look fine, try adjusting the resolution.</html>");
        }
        else if (pixelMiss > 0) {
            pixelCountLabel.setText("<html><b>" + pixelMiss + "</b>: Pixel mismatch. Resolution is too high.");
            pixelCountLabel.setToolTipText("<html>If your image appears doubled, reduce the width.<br>If it looks fine, reduce the height.</html>");
        }
        else {
            pixelCountLabel.setText("<html><b>" + pixelMiss + "</b>: Pixel mismatch. Resolution is too low.");
            pixelCountLabel.setToolTipText("<html>If your image appears cut off, increase the height.</html>");
        }
        previewLabel.setIcon(new ImageIcon(imgOut));
        previewLabel.repaint();
        pixelCountLabel.repaint();
        enableImageMenu(true);
        outputPanel.setPreferredSize(new Dimension(imgOut.getWidth(), imgOut.getHeight()));
    }//GEN-LAST:event_viewButtonActionPerformed

    private void filePathFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_filePathFieldCaretUpdate
        // TODO add your handling code here:
        try {
            Path path = Paths.get(filePathField.getText().trim());
            fileErrorLabel.setVisible(!Files.exists(path));
            imageTarget = path.toFile();
        } 
        catch (java.lang.NullPointerException | java.nio.file.InvalidPathException npe) {
            fileErrorLabel.setVisible(true);
        }
    }//GEN-LAST:event_filePathFieldCaretUpdate

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        // TODO add your handling code here:
        imgSaveChooser.setSelectedFile(new File(
                    filePathField.getText().substring(
                            0, filePathField.getText().lastIndexOf(".")
                    ) + ".png"
            ));
        int result = imgSaveChooser.showDialog(this, "Save");
        if (result == imgSaveChooser.APPROVE_OPTION) {
            try {
                ImageIO.write(imgOut, "PNG", imgSaveChooser.getSelectedFile());
            } catch (IOException ioe) {}
        }
        
    }//GEN-LAST:event_saveItemActionPerformed

    private void widthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthComboBoxActionPerformed
        // TODO add your handling code here:
        if (widthComboBox.getSelectedItem() != null) {
            widthSlider.setValue(Integer.parseInt(String.valueOf(widthComboBox.getSelectedItem())));
        }
    }//GEN-LAST:event_widthComboBoxActionPerformed

    private void heightComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightComboBoxActionPerformed
        // TODO add your handling code here:
        if (heightComboBox.getSelectedItem() != null) {
            heightSlider.setValue(Integer.parseInt(String.valueOf(heightComboBox.getSelectedItem())));
        }
    }//GEN-LAST:event_heightComboBoxActionPerformed

    private void clearItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearItemActionPerformed
        // TODO add your handling code here:
        imgOut = new BufferedImage((int) widthSpinner.getValue(), (int) heightSpinner.getValue(), BufferedImage.TYPE_INT_ARGB);
        previewLabel.setIcon(new ImageIcon(imgOut));
        enableImageMenu(false);
    }//GEN-LAST:event_clearItemActionPerformed

    private void bkgPreviewPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bkgPreviewPanelMouseClicked
        // TODO add your handling code here:
        Color c = jColorChooser1.showDialog(rootPane, "Choose Background Colour", new Color(1.0f,1.0f,1.0f));
        if (c != null) {
            outputPanel.setBackground(c);
            bkgPreviewPanel.setBackground(c);
        }
    }//GEN-LAST:event_bkgPreviewPanelMouseClicked

    private void bkgChooseLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bkgChooseLabelMouseClicked
        // TODO add your handling code here:
        bkgPreviewPanelMouseClicked(evt);
    }//GEN-LAST:event_bkgChooseLabelMouseClicked

    private void popSaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popSaveItemActionPerformed
        // TODO add your handling code here:
        saveItemActionPerformed(evt);
    }//GEN-LAST:event_popSaveItemActionPerformed

    private void outputPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputPanelMouseClicked
        // TODO add your handling code here:
        imgPopMenu.show(outputPanel, evt.getX(), evt.getY()); 
        
    }//GEN-LAST:event_outputPanelMouseClicked

    private void popClearItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popClearItemActionPerformed
        // TODO add your handling code here:
        clearItemActionPerformed(evt);
    }//GEN-LAST:event_popClearItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UncompressedViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UncompressedViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UncompressedViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UncompressedViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UncompressedViewerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bgrButton;
    private javax.swing.JRadioButton bgraButton;
    private javax.swing.JLabel bkgChooseLabel;
    private javax.swing.JPanel bkgPreviewPanel;
    private javax.swing.JMenuItem clearItem;
    private javax.swing.JButton fileBrowseButton;
    private javax.swing.JLabel fileErrorLabel;
    private javax.swing.JLabel fileErrorLabel1;
    private javax.swing.JFileChooser fileInChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel filePanel;
    private javax.swing.JTextField filePathField;
    private javax.swing.JComboBox<String> heightComboBox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSlider heightSlider;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JPopupMenu imgPopMenu;
    private javax.swing.JFileChooser imgSaveChooser;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel offsetPanel;
    private javax.swing.JSlider offsetSlider;
    private javax.swing.JSpinner offsetSpinner;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JLabel pixelCountLabel;
    private javax.swing.ButtonGroup pixelFormatGroup;
    private javax.swing.JLabel pixelFormatLabel;
    private javax.swing.JMenuItem popClearItem;
    private javax.swing.JMenuItem popSaveItem;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JRadioButton rgbButton;
    private javax.swing.JRadioButton rgbaButton;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JTextField skippedDataField;
    private javax.swing.JLabel skippedLabel;
    private javax.swing.JButton viewButton;
    private javax.swing.JComboBox<String> widthComboBox;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSlider widthSlider;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables
}
